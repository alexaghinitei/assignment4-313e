"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Alexandru Aghinitei and <FULL NAME>, this 
programming assignment is my own work and I have not provided this code to 
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: asa3964
UT EID 2:
"""


def length_of_longest_substring_n3(s):
    """
    Finds the length of the longest substring without repeating characters
    using a brute force approach (O(N^3)).

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """
    longest_substring = 0
    if len(s) == 0:
        longest_substring = 0
    else:
        for start_index in range(len(s)): #Loop over each possible starting index for a substring.

            for end_index in range(start_index, len(s)): # Make a nested loop that begins at the starting index,
                                                         # and ends at the length of s, representing the ending index.
                frequency = [0] * 256
                no_repeat = True
                length = 0
                substring = s[start_index:end_index + 1]
                for substring_index in range(len(substring)):
                    char_index = ord(substring[substring_index])
                    frequency[char_index] += 1
                    length += 1
                    if frequency[char_index] > 1:
                        no_repeat = False
                        length -= 1
                        break

                if no_repeat and longest_substring < length:
                    longest_substring = length
                
    return longest_substring
        


def length_of_longest_substring_n2(s):
    """
    Finds the length of the longest substring without repeating characters
    using a frequency list approach (O(N^2)), converting each character to
    their corresponding numeric representation in ASCII as the index into the
    frequency list.

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """
    longest_substring = 0
    if len(s) == 0:
        longest_substring = 0
    else:
        for start_index in range(len(s)):
            frequency = [0]*256
            no_repeat = True
            length = 0

            for substring_index in range(start_index, len(s)):
                char_index = ord(s[substring_index])
                frequency[char_index] += 1
                length += 1

                if frequency[char_index] > 1:
                    no_repeat = False
                    length -= 1 # do not break like O(N) does

                if no_repeat and longest_substring < length:
                    longest_substring = length
            
    return longest_substring


def length_of_longest_substring_n(s):
    """
    Finds the length of the longest substring without repeating characters
    using a frequency list approach (O(N)), converting each character to
    their corresponding numeric representation in ASCII as the index into the
    frequency list. However, this approach stops early, breaking out of the inner
    loop when a repeating character is found. You may also choose to challenge
    yourself by implementing a sliding window approach.

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """
    longest_substring = 0
    if len(s) == 0:
        longest_substring = 0
    else:
        for start_index in range(len(s)):
            frequency = [0]*256
            no_repeat = True
            length = 0

            for substring_index in range(start_index, len(s)):
                char_index = ord(s[substring_index])
                frequency[char_index] += 1
                length += 1

                if frequency[char_index] > 1:
                    no_repeat = False
                    length -= 1
                    break # break immediately instead of letting it run through

                if no_repeat and longest_substring < length:
                    longest_substring = length
            
    return longest_substring

